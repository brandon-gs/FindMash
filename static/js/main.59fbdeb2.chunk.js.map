{"version":3,"sources":["components/Pathfinding/Node/Node.jsx","components/Pathfinding/Alert/Alert.jsx","algorithms/dijkstra.js","helpers.js","components/Pathfinding/Pathfinding.jsx","components/Maze/Node/Node.jsx","components/Maze/Maze.jsx","components/BinarySearch/BinarySearch.jsx","scroll.js","App.js","serviceWorker.js","index.js"],"names":["col","row","isVisited","isFinish","isStart","isWall","onClick","onMouseDown","onMouseEnter","onMouseUp","extraClassName","color","Icon","id","className","style","onTouchStart","type","useState","message","setMessage","icon","setIcon","setColor","useEffect","infoMessageElement","document","getElementById","classList","remove","setTimeout","add","display","margin","marginRight","fontSize","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","getGridTemplateColumns","num","unit","cad","i","handleClick","currentNodeType","setStartRow","setStartCol","setCurrentNodeType","startRow","startCol","test","navigator","userAgent","window","DocumentTouch","newNodes","getNewNodesWithWallToggled","setNodes","setFinishRow","setFinishCol","animateShortestPath","nodesInShortestPathOrder","setRunning","visualizeDijkstra","visitedNodes","querySelectorAll","pathNodes","slice","map","newRoute","finishRow","finishCol","currentNode","unshift","getNodesInShortestPathOrder","extraClass","animateDijkstra","addEventListener","setMaxCol","Math","floor","body","clientWidth","createNodes","maxCol","currentRow","createNode","running","mousePressed","setMousePressed","disabled","rowIdx","nodeIdx","resetNodes","gridTemplateColumns","Fragment","key","handleMouseDown","handleMouseEnter","board","newBoard","newNode","Node","WALLS","isRunning","getNodesByDistance","nodesByDistance","forEach","getNeighbors","condition","Maze","nodeStartRow","setNodeStartRow","nodeStartCol","setNodeStartCol","nodeFinishRow","setNodeFinishRow","nodeFinishCol","setNodeFinishCol","rowNodes","wall","resetTextNodeClass","textNodes","animateShortestRoute","nodeRoute","animatePlayerRoute","visualize","searchRoutes","route","searchShortRoute","nodesVisited","nodesRoute","lastChild","animateMaze","startNodeFound","nodeByDistance","finishNodeFound","nodesNeighbors","nextNodeToVisit","getNearNode","a","b","updateNodes","marginLeft","handleNodeClick","smoothScroll","eID","startY","self","pageYOffset","documentElement","scrollTop","stopY","elm","y","offsetTop","offsetParent","elmYPosition","scrollTo","speed","round","step","leapY","timer","App","scroll","height","width","Boolean","location","hostname","match","ReactDOM","render","serviceWorker","ready","then","registration","unregister"],"mappings":"+YAIe,cAWR,IAVLA,EAUI,EAVJA,IACAC,EASI,EATJA,IACAC,EAQI,EARJA,UACAC,EAOI,EAPJA,SACAC,EAMI,EANJA,QACAC,EAKI,EALJA,OACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,YACAC,EAEI,EAFJA,aACAC,EACI,EADJA,UAEMC,EAAiBP,EACnB,eACAC,EACA,cACAC,EACA,aACA,GAEEM,EACJR,GAAYD,EAAY,MAAQE,GAAWF,EAAY,QAAU,GAE7DU,EAAOT,EACX,kBAAC,IAAD,MACEC,EACF,kBAAC,IAAD,MACE,KAEJ,OACE,yBACES,GAAE,eAAUZ,EAAV,YAAiBD,GACnBc,UAAS,eAAUJ,GACnBK,MAAO,CAAEJ,SACTL,QAAS,kBAAMA,EAAQL,EAAKD,IAC5BO,YAAa,kBAAMA,EAAYN,EAAKD,IACpCgB,aAAc,kBAAMT,EAAYN,EAAKD,IACrCQ,aAAc,kBAAMA,EAAaP,EAAKD,IACtCS,UAAW,kBAAMA,MAEhBG,ICvCQ,G,MAAA,YAA2B,IAAD,IAAvBK,YAAuB,MAAhB,UAAgB,IACTC,mBAAS,IADA,mBAChCC,EADgC,KACvBC,EADuB,OAEfF,mBAAS,MAFM,mBAEhCG,EAFgC,KAE1BC,EAF0B,OAGbJ,mBAAS,MAHI,mBAGhCP,EAHgC,KAGzBY,EAHyB,KAKvCC,qBAAU,WACK,UAATP,GACFG,EAAW,uCACXG,EAAS,WACTD,EAAQ,kBAAC,IAAD,QACU,WAATL,GACTG,EAAW,wCACXG,EAAS,WACTD,EAAQ,kBAAC,IAAD,QACU,SAATL,IACTG,EAAW,mDACXE,EAAQ,yBAAKR,UAAU,sBAEzB,IAAMW,EAAqBC,SAASC,eAAe,iBACnDF,EAAmBG,UAAUC,OAAO,iBACpCJ,EAAmBV,MAAQ,wBAC3Be,YAAW,WACTL,EAAmBG,UAAUG,IAAI,iBACjCN,EAAmBV,MAAQ,KAC1B,MACF,CAACE,IAEJ,IAAMP,EACK,UAATO,EACI,cACS,WAATA,EACA,eACS,SAATA,EACA,aACA,GAEN,OACE,yBAAKJ,GAAG,gBAAgBC,UAAS,eAAUJ,IACxCS,EACD,yBACEJ,MAAO,CACLiB,QAAS,OACTC,OAAQ,EACRtB,QACAuB,YAAa,GACbC,SAAU,UAGXd,MChDF,SAASe,EAASC,EAAMC,EAAWC,GACxC,IAAMC,EAAsB,GAC5BF,EAAUG,SAAW,EAGrB,IAFA,IAAMC,EAwCR,SAAqBL,GACnB,IAAMM,EAAQ,GADW,uBAEzB,YAAkBN,EAAlB,oDAAWpC,EAAX,+BAAwB,YAAmBA,EAAnB,oDAAW2C,EAAX,QAAwBD,EAAME,KAAKD,IAA3D,oFAFyB,kFAGzB,OAAOD,EA3CgBG,CAAYT,GAE1BK,EAAeK,QAAQ,CAC9BC,EAAoBN,GACpB,IAAMO,EAAcP,EAAeQ,QAEnC,IAAID,EAAY5C,OAAhB,CAIA,GAAI4C,EAAYR,WAAaU,IAAU,OAAOX,EAG9C,GAFAS,EAAY/C,WAAY,EACxBsC,EAAoBK,KAAKI,GACrBA,IAAgBV,EAAY,OAAOC,EACvCY,EAAyBH,EAAaZ,KAI1C,SAASW,EAAoBN,GAC3BA,EAAeW,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAMb,SAAWc,EAAMd,YAG/D,SAASW,EAAyBR,EAAMP,GACtC,IAAMmB,EAOR,SAA+BZ,EAAMP,GACnC,IAAMoB,EAAY,GACVzD,EAAa4C,EAAb5C,IAAKC,EAAQ2C,EAAR3C,IACTA,EAAM,GAAGwD,EAAUZ,KAAKR,EAAKpC,EAAM,GAAGD,IACtCC,EAAMoC,EAAKU,OAAS,GAAGU,EAAUZ,KAAKR,EAAKpC,EAAM,GAAGD,IACpDA,EAAM,GAAGyD,EAAUZ,KAAKR,EAAKpC,GAAKD,EAAM,IACxCA,EAAMqC,EAAK,GAAGU,OAAS,GAAGU,EAAUZ,KAAKR,EAAKpC,GAAKD,EAAM,IAC7D,OAAOyD,EAAUC,QAAO,SAAAC,GAAQ,OAAKA,EAASzD,aAdnB0D,CAAsBhB,EAAMP,GADX,uBAE5C,YAAuBmB,EAAvB,+CAA2C,CAAC,IAAjCG,EAAgC,QACzCA,EAASlB,SAAWG,EAAKH,SAAW,EACpCkB,EAASE,aAAejB,GAJkB,mFC7BvC,IAAMkB,EAAyB,SAACC,EAAKC,GAE1C,IADA,IAAIC,EAAM,GACDC,EAAI,EAAGA,EAAIH,EAAKG,IAAKD,GAAG,UAAOD,EAAP,KACjC,OAAOC,GCaM,G,MAAA,WACb,IAoBME,EAAc,SAAClE,EAAKD,GACxB,GAAwB,UAApBoE,EACFC,EAAYpE,GACZqE,EAAYtE,GACZuE,EAAmB,eACd,GAAwB,WAApBH,GAAiCnE,IAAQuE,GAAYxE,IAAQyE,GAIjE,GAAwB,SAApBL,IAoNQ,iEAAiEM,KACpFC,UAAUC,YAIV,iBAAkBC,QAEjBA,OAAOC,eAAiBpD,oBAAoBoD,eA3Na,CACxD,IAAMC,EAAWC,EAA2BrC,EAAO1C,EAAKD,GACxDiF,EAASF,SALTG,EAAajF,GACbkF,EAAanF,GACbuE,EAAmB,SA6DjBa,EAAsB,SAAAC,GAC1B,IADuD,IAAD,WAC7CnB,GAEPpC,YAAW,WACT,IAAMc,EAAOyC,EAAyBnB,GAClCtB,EAAKzC,UAAUmF,GAAW,GAC9B5D,SAASC,eAAT,eACUiB,EAAK3C,IADf,YACsB2C,EAAK5C,MACzBc,UAAY8B,EAAKzC,SACf,uCACAyC,EAAKxC,QACL,sCACA,4BACH,GAAK8D,IAZDA,EAAI,EAAGA,EAAImB,EAAyBtC,OAAQmB,IAAM,EAAlDA,IAgBLqB,EAAoB,WACxBN,EArEe,SAAAtC,GACf2C,GAAW,GAEX,IAAME,EAAe9D,SAAS+D,iBAAiB,kBAHvB,uBAIxB,YAAmBD,EAAnB,+CAAiC,SAC1B5D,UAAUC,OAAO,kBALA,kFASxB,IAAM6D,EAAYhE,SAAS+D,iBAAiB,uBATpB,uBAUxB,YAAmBC,EAAnB,+CAA8B,SACvB9D,UAAUC,OAAO,uBAXA,kFAgBxB,OADiBc,EAAMgD,QACPC,KAAI,SAAA3F,GAClB,OAAOA,EAAI2F,KAAI,SAAAhD,GACb,OAAY,eACPA,EADO,CAEVH,SAAUU,IACVjD,WAAW,EACX2D,aAAc,aA+CXgC,CAASlD,IAClB,IAAML,EAAYK,EAAM6B,GAAUC,GAC5BlC,EAAaI,EAAMmD,GAAWC,GAC9BvD,EAAsBJ,EAASO,EAAOL,EAAWC,GACjD8C,EFzEH,SAAqC9C,GAG1C,IAFA,IAAM8C,EAA2B,GAC7BW,EAAczD,EACK,OAAhByD,GACLX,EAAyBY,QAAQD,GACjCA,EAAcA,EAAYnC,aAE5B,OAAOwB,EEkE4Ba,CAA4B3D,GAC7DT,YAAW,YA9CW,SAACU,EAAqB6C,GAC5C,IAD0E,IAAD,WAChEnB,GACP,GAAIA,IAAM1B,EAAoBO,OAI5B,OAHAjB,YAAW,WACTsD,EAAoBC,KACnB,GAAKnB,GACF,CAAN,UAEFpC,YAAW,WACT,IAAMc,EAAOJ,EAAoB0B,GAC3BiC,EAAavD,EAAKzC,SACpB,eACAyC,EAAKxC,QACL,cACA,GACuBsB,SAASC,eAAT,eACjBiB,EAAK3C,IADY,YACL2C,EAAK5C,MAERc,UAAnB,eAAuCqF,EAAvC,oBACC,GAAKjC,IAlBDA,EAAI,EAAGA,GAAK1B,EAAoBO,OAAQmB,IAAK,CAAC,IAAD,IAA7CA,GAA6C,mCA8CpDkC,CAAgB5D,EAAqB6C,KACpC,MAGLR,OAAOwB,iBAAiB,UAAU,WAChCC,EAAUC,KAAKC,OAAO9E,SAAS+E,KAAKC,YAAc,IAAM,IAAM,MAGhE,IAsBMC,EAAc,SAAAC,GAElB,IADA,IAAMjE,EAAQ,GACL1C,EAAM,EAAGA,EAAM,GAAIA,IAAO,CAEjC,IADA,IAAM4G,EAAa,GACV7G,EAAM,EAAGA,EAAM4G,EAAQ5G,IAC9B6G,EAAWhE,KAAKiE,EAAW9G,EAAKC,IAClC0C,EAAME,KAAKgE,GAEb,OAAOlE,GAGHmE,EAAa,SAAC9G,EAAKC,GACvB,MAAO,CACLD,MACAC,MACAG,QAASH,IAAQuE,GAAYxE,IAAQyE,EACrCtE,SAAUF,IAAQ6F,GAAa9F,IAAQ+F,EACvCtD,SAAUU,IACVjD,WAAW,EACXG,QAAQ,EACRwD,aAAc,OApKC,EAwKS3C,mBAC1BqF,KAAKC,OAAO9E,SAAS+E,KAAKC,YAAc,IAAM,IAAM,GAzKnC,mBAwKZE,EAxKY,KAwKJN,EAxKI,OA2KWpF,oBAAS,GA3KpB,mBA2KZ6F,EA3KY,KA2KHzB,EA3KG,OA4KapE,mBAAS,MA5KtB,mBA4KZsD,EA5KY,KA4KFH,EA5KE,OA6KanD,mBAAS,MA7KtB,mBA6KZuD,EA7KY,KA6KFH,EA7KE,OA8KepD,mBAAS,MA9KxB,mBA8KZ4E,EA9KY,KA8KDZ,EA9KC,OA+KehE,mBAAS,MA/KxB,mBA+KZ6E,EA/KY,KA+KDZ,EA/KC,OAiLOjE,mBAASyF,KAjLhB,mBAiLZhE,EAjLY,KAiLLsC,EAjLK,OAkL2B/D,mBAAS,SAlLpC,mBAkLZkD,EAlLY,KAkLKG,EAlLL,OAmLqBrD,oBAAS,GAnL9B,mBAmLZ8F,EAnLY,KAmLEC,EAnLF,KA0LnB,OALAzF,qBAAU,WACRyD,EAAS0B,EAAYC,MAEpB,CAACA,EAAQxC,IAGV,yBAAKtD,UAAU,cAAcD,GAAG,eAC9B,kBAAC,EAAD,CAAOI,KAAMmD,IACb,yBAAKtD,UAAU,kBACb,4BACEA,UAAU,cACVoG,SAA8B,SAApB9C,GAA8B2C,EACxCzG,QAAS,kBAAMiF,MAHjB,kCAOA,4BACEzE,UAAU,aACVoG,SAA8B,UAApB9C,GAA+B2C,EACzCzG,QAAS,kBAAM2E,EA9EJ,SAAAtC,GACjB,IAAMoC,EAAWpC,EAAMiD,KAAI,SAAC3F,EAAKkH,GAC/B,OAAOlH,EAAI2F,KAAI,SAAChD,EAAMwE,GASpB,OARAxE,EAAKxC,SAAU,EACfwC,EAAKzC,UAAW,EAChByC,EAAK1C,WAAY,EACjB0C,EAAKiB,aAAe,KACpBjB,EAAKvC,QAAS,EACduC,EAAKH,SAAWU,IAChBzB,SAASC,eAAT,eAAgCiB,EAAK3C,IAArC,YAA4C2C,EAAK5C,MAAOc,UACtD,OACK8B,QAQX,OALAyB,EAAY,MACZC,EAAY,MACZY,EAAa,MACbC,EAAa,MACbZ,EAAmB,SACZQ,EA2DuBsC,CAAW1E,MAHrC,UASF,0BACE7B,UAAU,OACVC,MAAO,CAAEuG,oBAAqBxD,EAAuB8C,EAAQ,UAE5DjE,EAAMiD,KAAI,SAAC3F,EAAKkH,GACf,OAEE,kBAAC,IAAMI,SAAP,CAAgBC,IAAG,cAASL,IACzBlH,EAAI2F,KAAI,SAAChD,EAAMwE,GAAa,IACnBnH,EAAmD2C,EAAnD3C,IAAKD,EAA8C4C,EAA9C5C,IAAKK,EAAyCuC,EAAzCvC,OAAQH,EAAiC0C,EAAjC1C,UAAWE,EAAsBwC,EAAtBxC,QAASD,EAAayC,EAAbzC,SAC9C,OACE,kBAAC,EAAD,CACEqH,IAAG,eAAUJ,GACbnH,IAAKA,EACLD,IAAKA,EACLE,UAAWA,EACXG,OAAQA,EACRD,QAASA,EACTD,SAAUA,EACVG,QAAS,SAACL,EAAKD,GAAN,OAAcmE,EAAYlE,EAAKD,IACxCO,YAAa,SAACN,EAAKD,GAAN,OAjOP,SAACC,EAAKD,GAC5B,GAAwB,SAApBoE,EAA4B,CAC9B,IAAMW,EAAWC,EAA2BrC,EAAO1C,EAAKD,GACxDiF,EAASF,GACTkC,GAAgB,IA6NyBQ,CAAgBxH,EAAKD,IAChDQ,aAAc,SAACP,EAAKD,GAAN,OA1NP,SAACC,EAAKD,GAC7B,GAAwB,SAApBoE,EAA4B,CAC9B,IAAK4C,EAAc,OACnB,IAAMjC,EAAWC,EAA2BrC,EAAO1C,EAAKD,GACxDiF,EAASF,IAsNiC2C,CAAiBzH,EAAKD,IAClDS,UAAW,WAlNH,SAApB2D,GAA4B6C,GAAgB,iBA2OpD,IAAMjC,EAA6B,SAAC2C,EAAO1H,EAAKD,GAC9C,IAAM4H,EAAWD,EAAMhC,QACjB/C,EAAOgF,EAAS3H,GAAKD,GACrB6H,EAAO,eACRjF,EADQ,CAEXvC,QAASuC,EAAKvC,SAOhB,OALAuH,EAAS3H,GAAKD,GAAO4H,EAAS3H,GAAKD,GAAKG,SACpCyC,EACAgF,EAAS3H,GAAKD,GAAKI,QACnBwC,EACAiF,EACGD,G,OCxPME,G,MA/BF,SAAC,GAAuB,IAArBlF,EAAoB,EAApBA,KAAMtC,EAAc,EAAdA,QACd6F,EAAavD,EAAKxC,SAAWwC,EAAKzC,SACpC,uCACAyC,EAAKxC,QACL,oBACAwC,EAAKzC,SACL,qBACAyC,EAAKvC,OACL,mBACA,GAGJ,OACE,yBACES,UAAS,qBAAgBqF,GACzBtF,GAAE,oBAAe+B,EAAK3C,IAApB,YAA2B2C,EAAK5C,KAClCM,QAAS,kBAAMA,EAAQsC,EAAK5C,IAAK4C,EAAK3C,OAEtC,uBAAGa,UAAU,oBAEX8B,EAAKH,WAAaU,IAChB,GACkB,IAAlBP,EAAKH,SACL,QAAUG,EAAKH,SACfG,EAAKH,aCjBTshB,SAASC,EAAmBxF,EAAUE,GACpC,IAAMuF,EAAkB,GAIxB,OAHAvF,EAAMwF,SAAQ,SAAAlI,GACZiI,EAAgBrF,KAAhB,MAAAqF,EAAe,YAASjI,EAAIyD,QAAO,SAAAd,GAAI,OAAIA,EAAKH,WAAaA,UAExDyF,EAGT,IAAME,EAAe,SAACxF,EAAMD,EAAO0F,GACjC,IAAM5E,EAAY,GACVzD,EAAa4C,EAAb5C,IAAKC,EAAQ2C,EAAR3C,IAKb,OAJIA,EAAM,GAAK,GAAGwD,EAAUZ,KAAKF,EAAM1C,EAAM,GAAGD,IAC5CA,EAAM,EAAI2C,EAAM1C,GAAK8C,QAAQU,EAAUZ,KAAKF,EAAM1C,GAAKD,EAAM,IAC7DC,EAAM,EAAI0C,EAAMI,QAAQU,EAAUZ,KAAKF,EAAM1C,EAAM,GAAGD,IACtDA,EAAM,GAAK,GAAGyD,EAAUZ,KAAKF,EAAM1C,GAAKD,EAAM,IAC3CyD,EAAUC,QAAO,SAAAd,GAAI,OAAIyF,EAAUzF,OAG7B0F,EA7QF,WAAM,MAEuBpH,mBAjDnB,GA+CJ,mBAEVqH,EAFU,KAEIC,EAFJ,OAGuBtH,mBAjDnB,GA8CJ,mBAGVuH,EAHU,KAGIC,EAHJ,OAIyBxH,mBAAS,MAJlC,mBAIVyH,EAJU,KAIKC,EAJL,OAKyB1H,mBAAS,MALlC,mBAKV2H,EALU,KAKKC,EALL,KASXhC,EAAa,SAAC9G,EAAKC,GACvB,MAAO,CACLD,MACAC,MACAG,QAASH,IAAQsI,GAAgBvI,IAAQyI,EACzCtI,SAAUF,IAAQ0I,GAAiB3I,IAAQ6I,EAC3CxI,QAAQ,EACRH,WAAW,EACXuC,SAAUU,MAIRwD,EAAc,WAElB,IADA,IAAMhE,EAAQ,GACL1C,EAAM,EAAGA,EAxET,EAwEqBA,IAAO,CAEnC,IADA,IAAM8I,EAAW,GACR/I,EAAM,EAAGA,EAzEX,EAyEuBA,IAC5B+I,EAASlG,KAAKiE,EAAW9G,EAAKC,IAEhC0C,EAAME,KAAKkG,GAQb,OALAhB,EAAMI,SAAQ,SAAAa,GACZ,IAAMhJ,EAAMgJ,EAAK,GACX/I,EAAM+I,EAAK,GACjBrG,EAAM1C,GAAKD,GAAX,eAAuB2C,EAAM1C,GAAKD,GAAlC,CAAwCK,QAAQ,OAE3CsC,GA8CHsG,EAAqB,WACzB,IAAMC,EAAYxH,SAAS+D,iBAAiB,eADb,uBAE/B,YAAuByD,EAAvB,+CAAkC,SACvBpI,UAAY,oBAHQ,oFAyB3BqI,EAAuB,SAAAC,GAC3B,IADyC,IAAD,WAC/BlF,GACP,GAAIA,IAAMkF,EAAUrG,OAIlB,OAHAjB,YAAW,YArBU,SAAAsH,GACzB,IADuC,IAAD,WAC7BlF,GAEPpC,YAAW,WACT,IAAMc,EAAOwG,EAAUlF,GACvBwE,EAAgB9F,EAAK5C,KACrBwI,EAAgB5F,EAAK3C,KAErByB,SAASC,eAAT,oBACeiB,EAAK3C,IADpB,YAC2B2C,EAAK5C,MAC9Bc,UAAa8B,EAAKzC,SAEhB,kDADA,+BAEAyC,EAAKzC,WAAU6H,GAAY,KAC9B,IAAM9D,IAbFA,EAAI,EAAGA,EAAIkF,EAAUrG,OAAQmB,IAAM,EAAnCA,GAqBHmF,CAAmBD,KAClB,IAAMlF,GACH,CAAN,UAEFpC,YAAW,WACT,IAAMc,EAAOwG,EAAUlF,GACvBxC,SAASC,eAAT,oBACeiB,EAAK3C,IADpB,YAC2B2C,EAAK5C,MAC9Bc,UAAY8B,EAAKxC,QACf,+BACAwC,EAAKzC,SACL,gCACA,oCACH,GAAK+D,IAhBDA,EAAI,EAAGA,GAAKkF,EAAUrG,OAAQmB,IAAK,CAAC,IAAD,IAAnCA,GAAmC,oCAuCxCoF,EAAY,SAAC3G,EAAOoD,EAAWD,GACnC,IAAMN,EAAe+D,EAAa5G,EAAOoD,EAAWD,GAC9C0D,EAAQC,EAAiB9G,EAAO8F,EAAcF,GACpDzG,YAAW,YAtBO,SAAC4H,EAAcC,GACjC,IADiD,IAAD,WACvCzF,GACP,GAAIA,IAAMwF,EAAa3G,OAIrB,OAHAjB,YAAW,WACTqH,EAAqBQ,KACpB,GAAKzF,GACF,CAAN,UAEFpC,YAAW,WACT,IAAMc,EAAO8G,EAAaxF,GACNxC,SAASC,eAAT,oBACLiB,EAAK3C,IADA,YACO2C,EAAK5C,MAEQ4J,UACpB9I,UAAY,eAC/B,GAAKoD,IAdDA,EAAI,EAAGA,GAAKwF,EAAa3G,OAAQmB,IAAK,CAAC,IAAD,IAAtCA,GAAsC,mCAsB7C2F,CAAYrE,EAAcgE,KACzB,MAGCD,EAAe,SAAC5G,EAAOoD,EAAWD,GACtC,IAAMN,EAAe,GACjB/C,EAAW,EACfE,EAAMmD,GAAWC,GAAjB,eACKpD,EAAMmD,GAAWC,GADtB,CAEE7F,WAAW,EACXuC,aAEF+C,EAAa3C,KAAKF,EAAMmD,GAAWC,IAEnC,IADA,IAAI+D,GAAiB,GACbA,GAAgB,CACtB,IAAM5B,EAAkBD,EAAmBxF,EAAUE,GAD/B,uBAEtB,YAA6BuF,EAA7B,+CAA8C,CAAC,IAApC6B,EAAmC,QAEtCvG,EAAqB4E,EACzB2B,EACApH,GAHgB,SAAAC,GAAI,OAAKA,EAAKvC,SAAWuC,EAAK1C,aADJ,uBAO5C,YAAuBsD,EAAvB,+CAA2C,CAAC,IAAjCG,EAAgC,QACjC3D,EAAa2D,EAAb3D,IAAKC,EAAQ0D,EAAR1D,IACb0C,EAAM1C,GAAKD,GAAX,eACK2C,EAAM1C,GAAKD,GADhB,CAEEE,WAAW,EACXuC,SAAUA,EAAW,IAEvB+C,EAAa3C,KAAKF,EAAM1C,GAAKD,IACzB2C,EAAM1C,GAAKD,GAAKI,UAAS0J,GAAiB,IAfJ,oFAFxB,kFAoBtBrH,IAEF,OAAO+C,GAGHiE,EAAmB,SAAC9G,EAAO8B,EAAUD,GAMzC,IALA,IAAMlC,EAAYK,EAAM6B,GAAUC,GAC5B+E,EAAQ,CAAClH,GACX0H,GAAkB,EAClBhE,EAAc1D,EACZ+F,EAAY,SAAAzF,GAAI,OAAKA,EAAKvC,SACxB2J,GAAiB,CACvB,IAAMC,EAAiB7B,EAAapC,EAAarD,EAAO0F,GAClD6B,EAAkBC,EAAYF,GACpCT,EAAM3G,KAAKqH,GACXlE,EAAckE,EACVA,EAAgB/J,WAAU6J,GAAkB,GAElD,OAAOR,GAGHW,EAAc,SAAAxH,GAElB,OADmBA,EAAMgD,QAAQtC,MAAK,SAAC+G,EAAGC,GAAJ,OAAUD,EAAE3H,SAAW4H,EAAE5H,YAC7C,IAhNH,EAoNSvB,mBAASyF,KApNlB,mBAoNVhE,EApNU,KAoNHsC,EApNG,KA2NjB,OALAzD,qBAAU,WACRyD,EAhLkB,SAAAtC,GAGlB,IAFA,IAAMoC,EAAW,GAER9E,EAAM,EAAGA,EA3FT,EA2FqBA,IAAO,CAEnC,IADA,IAAM8I,EAAW,GACR/I,EAAM,EAAGA,EA5FX,EA4FuBA,IAAO,CAEnC,IAAMgG,EAAcrD,EAAM1C,GAAKD,GAC3BgG,EAAY5F,UAAS4F,EAAY5F,SAAU,GAC3CH,IAAQsI,GAAgBvI,IAAQyI,IAClCzC,EAAY5F,SAAU,GACxB2I,EAASlG,KAAKmD,GAEhBjB,EAASlC,KAAKkG,GAEhB,OAAOhE,EAiKEuF,CAAY3H,MAEpB,CAAC8F,EAAcF,IAGhB,0BAAMzH,UAAU,OAAOD,GAAG,QACxB,uBAAGC,UAAU,iBAAb,sBAEE,0BACEC,MAAO,CAAEwJ,WAAY,IACrBzJ,UAAU,mCAGd,6BAASA,UAAU,cAChB6B,EAAMiD,KAAI,SAAC3F,EAAKkH,GACf,OACE,yBAAKrG,UAAU,YAAY0G,IAAG,cAASL,IACpClH,EAAI2F,KAAI,SAAChD,EAAMwE,GACd,OACE,kBAAC,EAAD,CACEI,IAAG,eAAUL,EAAV,YAAoBC,GACvBxE,KAAMA,EACNtC,QAAS,SAACN,EAAKC,IAnLT,SAACD,EAAKC,GAAS,IAAD,EACC0C,EAAM1C,GAAKD,GAAxCK,EAD4B,EAC5BA,OAAQD,EADoB,EACpBA,QAASD,EADW,EACXA,SACzB,KAAIE,GAAUD,GAAWD,GAAY6H,GAArC,CACAA,GAAY,EAEZ,IAAMjD,EAAW4B,IACjB5B,EAAS9E,GAAKD,GAAd,eAA0B+E,EAAS9E,GAAKD,GAAxC,CAA8CG,UAAU,IAGpC,OAAlBwI,GACkB,OAAlBE,GACCF,IAAkB1I,GAAO4I,IAAkB7I,IAE5C+E,EAAS4D,GAAeE,GAAxB,eACK9D,EAAS4D,GAAeE,GAD7B,CAEE1I,UAAU,KAEd8I,IACAH,EAAiB9I,GACjB4I,EAAiB3I,GACjBgF,EAASF,GACTuE,EAAUvE,EAAU/E,EAAKC,IA+JPuK,CAAgBxK,EAAKC,gB,YC5RzCsG,KAAKC,OAAO9E,SAAS+E,KAAKC,YAAc,IAAM,ICgBjC,SAAS+D,EAAaC,GACnC,IAAIC,EArBAC,KAAKC,YAAoBD,KAAKC,YAE9BnJ,SAASoJ,iBAAmBpJ,SAASoJ,gBAAgBC,UAChDrJ,SAASoJ,gBAAgBC,UAE9BrJ,SAAS+E,KAAKsE,UAAkBrJ,SAAS+E,KAAKsE,UAC3C,EAgBHC,EAbN,SAAsBN,GAIpB,IAHA,IAAIO,EAAMvJ,SAASC,eAAe+I,GAC9BQ,EAAID,EAAIE,UACRvI,EAAOqI,EACJrI,EAAKwI,cAAgBxI,EAAKwI,eAAiB1J,SAAS+E,MAEzDyE,IADAtI,EAAOA,EAAKwI,cACFD,UAEZ,OAAOD,EAKKG,CAAaX,GACrBjI,EAAWuI,EAAQL,EAASK,EAAQL,EAASA,EAASK,EAC1D,GAAIvI,EAAW,IAEb6I,SAAS,EAAGN,OAFd,CAKA,IAAIO,EAAQhF,KAAKiF,MAAM/I,EAAW,KAC9B8I,GAAS,KAAIA,EAAQ,IACzB,IAAIE,EAAOlF,KAAKiF,MAAM/I,EAAW,IAC7BiJ,EAAQV,EAAQL,EAASA,EAASc,EAAOd,EAASc,EAClDE,EAAQ,EACZ,GAAIX,EAAQL,EACV,IAAK,IAAIzG,EAAIyG,EAAQzG,EAAI8G,EAAO9G,GAAKuH,EAEnC3J,WAAW,sBAAwB4J,EAAQ,IAAKC,EAAQJ,IACxDG,GAASD,GACGT,IAAOU,EAAQV,GAC3BW,SAIJ,IAAK,IAAIzH,EAAIyG,EAAQzG,EAAI8G,EAAO9G,GAAKuH,EAEnC3J,WAAW,sBAAwB4J,EAAQ,IAAKC,EAAQJ,IACxDG,GAASD,GACGT,IAAOU,EAAQV,GAC3BW,K,MC/BWC,MAdf,WACE,OACE,yBAAK9K,UAAU,OACb,6BAASA,UAAU,QACjB,4BAAQA,UAAU,YAAYR,QAAS,kBAAMuL,EAAO,iBAApD,eACA,4BAAQ/K,UAAU,YAAYR,QAAS,kBAAMuL,EAAO,UAApD,SAEF,yBAAK9K,MAAO,CAAC+K,OAAQ,OAAQC,MAAO,WACpC,kBAAC,EAAD,MACA,kBAAC,EAAD,QCJcC,QACW,cAA7BnH,OAAOoH,SAASC,UAEe,UAA7BrH,OAAOoH,SAASC,UAEhBrH,OAAOoH,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS3K,SAASC,eAAe,SD6H3C,kBAAmBgD,WACrBA,UAAU2H,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.59fbdeb2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Node.css\";\r\nimport { FaChevronRight } from \"react-icons/fa\";\r\nimport { FiTarget } from 'react-icons/fi';\r\nexport default ({\r\n  col,\r\n  row,\r\n  isVisited,\r\n  isFinish,\r\n  isStart,\r\n  isWall,\r\n  onClick,\r\n  onMouseDown,\r\n  onMouseEnter,\r\n  onMouseUp\r\n}) => {\r\n  const extraClassName = isFinish\r\n    ? \"node--finish\"\r\n    : isStart\r\n    ? \"node--start\"\r\n    : isWall\r\n    ? \"node--wall\"\r\n    : \"\";\r\n\r\n  const color =\r\n    isFinish && isVisited ? \"red\" : isStart && isVisited ? \"green\" : \"\";\r\n\r\n  const Icon = isFinish ? (\r\n    <FiTarget />\r\n  ) : isStart ? (\r\n    <FaChevronRight />\r\n  ) : null;\r\n\r\n  return (\r\n    <div\r\n      id={`node-${row}-${col}`}\r\n      className={`node ${extraClassName}`}\r\n      style={{ color }}\r\n      onClick={() => onClick(row, col)}\r\n      onMouseDown={() => onMouseDown(row, col)}     \r\n      onTouchStart={() => onMouseDown(row, col)} \r\n      onMouseEnter={() => onMouseEnter(row, col)}\r\n      onMouseUp={() => onMouseUp()}\r\n    >\r\n      {Icon}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { FaChevronRight } from \"react-icons/fa\";\r\nimport { FiTarget } from 'react-icons/fi';\r\nimport \"./Alert.css\";\r\n\r\nexport default ({ type = \"default\" }) => {\r\n  const [message, setMessage] = useState(\"\");\r\n  const [icon, setIcon] = useState(null);\r\n  const [color, setColor] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (type === \"start\") {\r\n      setMessage(\"Click on a node to add a start node\");\r\n      setColor(\"#3B3B98\");\r\n      setIcon(<FaChevronRight />);\r\n    } else if (type === \"finish\") {\r\n      setMessage(\"Click on a node to add a target node\");\r\n      setColor(\"#ff3838\");\r\n      setIcon(<FiTarget />);\r\n    } else if (type === \"wall\") {\r\n      setMessage(\"Press click and hold on the nodes to add a wall\");\r\n      setIcon(<div className=\"node node--wall\" />);\r\n    }\r\n    const infoMessageElement = document.getElementById(\"info--message\");\r\n    infoMessageElement.classList.remove(\"info--animate\");\r\n    infoMessageElement.style = \"transform: scale(0.3)\";\r\n    setTimeout(() => {\r\n      infoMessageElement.classList.add(\"info--animate\");\r\n      infoMessageElement.style = \"\";\r\n    }, 10);\r\n  }, [type]);\r\n\r\n  const extraClassName =\r\n    type === \"start\"\r\n      ? \"info--start\"\r\n      : type === \"finish\"\r\n      ? \"info--finish\"\r\n      : type === \"wall\"\r\n      ? \"info--wall\"\r\n      : \"\";\r\n\r\n  return (\r\n    <div id=\"info--message\" className={`info ${extraClassName}`}>\r\n      {message}\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          margin: 5,\r\n          color,\r\n          marginRight: 10,\r\n          fontSize: \"1.3em\"\r\n        }}\r\n      >\r\n        {icon}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\r\n// in which they were visited. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n// by backtracking from the finish node.\r\n\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    // If the node is a wall, we skip it;\r\n    if (closestNode.isWall) continue;\r\n    \r\n    // If the node is at a distance of inifinity\r\n    // We must be trapped and should therefore stop\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]); // left\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]); // right\r\n  if (col > 0) neighbors.push(grid[row][col - 1]); // up\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]); // down\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) for (const node of row) nodes.push(node);\r\n  return nodes;\r\n}\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","// Similiar to repeat in css\r\nexport const getGridTemplateColumns = (num, unit) => {\r\n  let cad = \"\";\r\n  for (let i = 0; i < num; i++) cad += `${unit} `;\r\n  return cad;\r\n};","import React, { useState, useEffect } from \"react\";\r\nimport Node from \"./Node/Node.jsx\";\r\nimport Alert from \"./Alert/Alert.jsx\";\r\nimport {\r\n  dijkstra,\r\n  getNodesInShortestPathOrder\r\n} from \"../../algorithms/dijkstra\";\r\nimport { getGridTemplateColumns } from '../../helpers';\r\nimport \"./Pathfinding.css\";\r\n\r\n/* DEFAULT VALUES\r\nconst START_NODE_ROW = 6;\r\nconst START_NODE_COL = 1;\r\nconst FINISH_NODE_ROW = 1;\r\nconst FINISH_NODE_COL = Math.floor((window.screen.availWidth - 30) / 30) - 4;\r\n*/\r\n\r\nexport default () => {\r\n  const handleMouseDown = (row, col) => {\r\n    if (currentNodeType === \"wall\") {\r\n      const newNodes = getNewNodesWithWallToggled(nodes, row, col);\r\n      setNodes(newNodes);\r\n      setMousePressed(true);\r\n    }\r\n  };\r\n\r\n  const handleMouseEnter = (row, col) => {\r\n    if (currentNodeType === \"wall\") {\r\n      if (!mousePressed) return;\r\n      const newNodes = getNewNodesWithWallToggled(nodes, row, col);\r\n      setNodes(newNodes);\r\n    }\r\n  };\r\n\r\n  const handleMouseUp = () => {\r\n    if (currentNodeType === \"wall\") setMousePressed(false);\r\n  };\r\n\r\n  const handleClick = (row, col) => {\r\n    if (currentNodeType === \"start\") {\r\n      setStartRow(row);\r\n      setStartCol(col);\r\n      setCurrentNodeType(\"finish\"); // Next node type\r\n    } else if (currentNodeType === \"finish\" && (row !== startRow || col !== startCol)) {\r\n      setFinishRow(row);\r\n      setFinishCol(col);\r\n      setCurrentNodeType(\"wall\"); // next node type\r\n    } else if (currentNodeType === \"wall\" && isTouchDevice()) {\r\n      const newNodes = getNewNodesWithWallToggled(nodes, row, col);\r\n      setNodes(newNodes);\r\n    }\r\n  };\r\n\r\n  /* \r\n  Restart values from nodes, except start and finish nodes\r\n  */\r\n  const newRoute = nodes => {\r\n    setRunning(true);\r\n    // *** Reset clases of visited nodes ***\r\n    const visitedNodes = document.querySelectorAll(\".node--visited\");\r\n    for (const node of visitedNodes) {\r\n      node.classList.remove(\"node--visited\");\r\n    }\r\n\r\n    // *** Reset clases of route path nodes***\r\n    const pathNodes = document.querySelectorAll(\".node-shortest-path\");\r\n    for (const node of pathNodes) {\r\n      node.classList.remove(\"node-shortest-path\");\r\n    }\r\n\r\n    // *** Change values of new walls in the nodes **\r\n    const newNodes = nodes.slice();\r\n    return newNodes.map(row => {\r\n      return row.map(node => {\r\n        return (node = {\r\n          ...node,\r\n          distance: Infinity,\r\n          isVisited: false,\r\n          previousNode: null\r\n        });\r\n      });\r\n    });\r\n  };\r\n\r\n  const animateDijkstra = (visitedNodesInOrder, nodesInShortestPathOrder) => {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          animateShortestPath(nodesInShortestPathOrder);\r\n        }, 50 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        const extraClass = node.isFinish\r\n          ? \"node--finish\"\r\n          : node.isStart\r\n          ? \"node--start\"\r\n          : \"\";\r\n        const currentNodeElement = document.getElementById(\r\n          `node-${node.row}-${node.col}`\r\n        );\r\n        currentNodeElement.className = `node ${extraClass} node--visited`;\r\n      }, 50 * i);\r\n    }\r\n  };\r\n\r\n  const animateShortestPath = nodesInShortestPathOrder => {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      // eslint-disable-next-line no-loop-func\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        if (node.isFinish) setRunning(false);\r\n        document.getElementById(\r\n          `node-${node.row}-${node.col}`\r\n        ).className = node.isFinish\r\n          ? \"node node--finish node-shortest-path\"\r\n          : node.isStart\r\n          ? \"node node--start node-shortest-path\"\r\n          : \"node node-shortest-path\";\r\n      }, 80 * i);\r\n    }\r\n  };\r\n\r\n  const visualizeDijkstra = () => {\r\n    setNodes(newRoute(nodes));\r\n    const startNode = nodes[startRow][startCol];\r\n    const finishNode = nodes[finishRow][finishCol];\r\n    const visitedNodesInOrder = dijkstra(nodes, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    setTimeout(() => {\r\n      animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }, 300);\r\n  };\r\n\r\n  window.addEventListener(\"resize\", () => {\r\n    setMaxCol(Math.floor((document.body.clientWidth - 30) / 30) - 2);\r\n  });\r\n\r\n  const resetNodes = nodes => {\r\n    const newNodes = nodes.map((row, rowIdx) => {\r\n      return row.map((node, nodeIdx) => {\r\n        node.isStart = false;\r\n        node.isFinish = false;\r\n        node.isVisited = false;\r\n        node.previousNode = null;\r\n        node.isWall = false;\r\n        node.distance = Infinity;\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node\";\r\n        return node;\r\n      });\r\n    });\r\n    setStartRow(null);\r\n    setStartCol(null);\r\n    setFinishRow(null);\r\n    setFinishCol(null);\r\n    setCurrentNodeType(\"start\");\r\n    return newNodes;\r\n  };\r\n\r\n  const createNodes = maxCol => {\r\n    const nodes = [];\r\n    for (let row = 0; row < 10; row++) {\r\n      const currentRow = [];\r\n      for (let col = 0; col < maxCol; col++)\r\n        currentRow.push(createNode(col, row));\r\n      nodes.push(currentRow);\r\n    }\r\n    return nodes;\r\n  };\r\n\r\n  const createNode = (col, row) => {\r\n    return {\r\n      col,\r\n      row,\r\n      isStart: row === startRow && col === startCol,\r\n      isFinish: row === finishRow && col === finishCol,\r\n      distance: Infinity,\r\n      isVisited: false,\r\n      isWall: false,\r\n      previousNode: null\r\n    };\r\n  };\r\n\r\n  const [maxCol, setMaxCol] = useState(\r\n    Math.floor((document.body.clientWidth - 30) / 30) - 2\r\n  );\r\n  const [running, setRunning] = useState(false);\r\n  const [startRow, setStartRow] = useState(null);\r\n  const [startCol, setStartCol] = useState(null);\r\n  const [finishRow, setFinishRow] = useState(null);\r\n  const [finishCol, setFinishCol] = useState(null);\r\n\r\n  const [nodes, setNodes] = useState(createNodes());\r\n  const [currentNodeType, setCurrentNodeType] = useState(\"start\");\r\n  const [mousePressed, setMousePressed] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setNodes(createNodes(maxCol));\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [maxCol, currentNodeType]);\r\n\r\n  return (\r\n    <div className=\"pathfinding\" id=\"pathfinding\">\r\n      <Alert type={currentNodeType}></Alert>\r\n      <div className=\"btn--container\">\r\n        <button\r\n          className=\"btn--option\"\r\n          disabled={currentNodeType !== \"wall\" || running}\r\n          onClick={() => visualizeDijkstra()}\r\n        >\r\n          Visualize Dijkstra's Algorithm\r\n        </button>\r\n        <button\r\n          className=\"btn--reset\"\r\n          disabled={currentNodeType === \"start\" || running}\r\n          onClick={() => setNodes(resetNodes(nodes))}\r\n        >\r\n          Reset\r\n        </button>\r\n      </div>\r\n\r\n      <main\r\n        className=\"grid\"\r\n        style={{ gridTemplateColumns: getGridTemplateColumns(maxCol, \"30px\") }}\r\n      >\r\n        {nodes.map((row, rowIdx) => {\r\n          return (\r\n            /*  <div key={`row-${rowIdx}`}> */\r\n            <React.Fragment key={`row-${rowIdx}`}>\r\n              {row.map((node, nodeIdx) => {\r\n                const { row, col, isWall, isVisited, isStart, isFinish } = node;\r\n                return (\r\n                  <Node\r\n                    key={`node-${nodeIdx}`}\r\n                    row={row}\r\n                    col={col}\r\n                    isVisited={isVisited}\r\n                    isWall={isWall}\r\n                    isStart={isStart}\r\n                    isFinish={isFinish}\r\n                    onClick={(row, col) => handleClick(row, col)}\r\n                    onMouseDown={(row, col) => handleMouseDown(row, col)}\r\n                    onMouseEnter={(row, col) => handleMouseEnter(row, col)}\r\n                    onMouseUp={() => handleMouseUp()}\r\n                  ></Node>\r\n                );\r\n              })}\r\n            </React.Fragment>\r\n            /* </div> */\r\n          );\r\n        })}\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction isTouchDevice() {\r\n  let useragentmatch = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(\r\n    navigator.userAgent\r\n  );\r\n  return (\r\n    useragentmatch ||\r\n    \"ontouchstart\" in window ||\r\n    // eslint-disable-next-line no-undef\r\n    (window.DocumentTouch && document instanceof DocumentTouch)\r\n  );\r\n}\r\n\r\nconst getNewNodesWithWallToggled = (board, row, col) => {\r\n  const newBoard = board.slice();\r\n  const node = newBoard[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall\r\n  };\r\n  newBoard[row][col] = newBoard[row][col].isFinish\r\n    ? node\r\n    : newBoard[row][col].isStart\r\n    ? node\r\n    : newNode;\r\n  return newBoard;\r\n};\r\n","import React from \"react\";\r\nimport \"./Node.css\";\r\n\r\nconst Node = ({ node, onClick }) => {\r\n  const extraClass = node.isStart && node.isFinish \r\n    ? \"node__maze--finish node__maze--start\"\r\n    : node.isStart\r\n    ? \"node__maze--start\"\r\n    : node.isFinish\r\n    ? \"node__maze--finish\"\r\n    : node.isWall\r\n    ? \"node__maze--wall\"\r\n    : \"\";\r\n\r\n  \r\n  return (\r\n    <div\r\n      className={`node__maze ${extraClass}`}\r\n      id={`node-maze-${node.row}-${node.col}`}\r\n      onClick={() => onClick(node.col, node.row)}\r\n    >\r\n      <p className=\"node__text--hide\">\r\n        {\r\n        node.distance === Infinity \r\n        ? \"\"\r\n        : node.distance === 0\r\n        ? \"Goal \" + node.distance\r\n        : node.distance\r\n        }\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Node;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Node from \"./Node/Node.jsx\";\r\nimport \"./Maze.css\";\r\n\r\nconst ROWS = 8;\r\nconst COLS = 8;\r\nconst NODE_START_ROW = 3;\r\nconst NODE_START_COL = 3;\r\n\r\n// [COL, ROW]\r\nconst WALLS = [\r\n  [0, 0],\r\n  [1, 0],\r\n  [2, 0],\r\n  [3, 0],\r\n  [4, 0],\r\n  [6, 0],\r\n  [7, 0],\r\n  [0, 1],\r\n  [7, 1],\r\n  [0, 2],\r\n  [2, 2],\r\n  [3, 2],\r\n  [4, 2],\r\n  [5, 2],\r\n  [7, 2],\r\n  [0, 3],\r\n  [2, 3],\r\n  [4, 3],\r\n  [7, 3],\r\n  [0, 4],\r\n  [2, 4],\r\n  [4, 4],\r\n  [5, 4],\r\n  [7, 4],\r\n  [0, 5],\r\n  [2, 5],\r\n  [4, 5],\r\n  [7, 5],\r\n  [0, 6],\r\n  [7, 6],\r\n  [0, 7],\r\n  [1, 7],\r\n  [2, 7],\r\n  [3, 7],\r\n  [4, 7],\r\n  [5, 7],\r\n  [6, 7],\r\n  [7, 7]\r\n];\r\n\r\nvar isRunning = false;\r\n\r\nconst Maze = () => {\r\n  // *** START NODE & FINISH NODE STATE ***\r\n  const [nodeStartRow, setNodeStartRow] = useState(NODE_START_ROW);\r\n  const [nodeStartCol, setNodeStartCol] = useState(NODE_START_COL);\r\n  const [nodeFinishRow, setNodeFinishRow] = useState(null);\r\n  const [nodeFinishCol, setNodeFinishCol] = useState(null);\r\n\r\n  // *** FUNCTIONS ***\r\n\r\n  const createNode = (col, row) => {\r\n    return {\r\n      col,\r\n      row,\r\n      isStart: row === nodeStartRow && col === nodeStartCol,\r\n      isFinish: row === nodeFinishRow && col === nodeFinishCol,\r\n      isWall: false,\r\n      isVisited: false,\r\n      distance: Infinity\r\n    };\r\n  };\r\n\r\n  const createNodes = () => {\r\n    const nodes = [];\r\n    for (let row = 0; row < ROWS; row++) {\r\n      const rowNodes = [];\r\n      for (let col = 0; col < COLS; col++) {\r\n        rowNodes.push(createNode(col, row));\r\n      }\r\n      nodes.push(rowNodes);\r\n    }\r\n    // *** ADD WALLS ***\r\n    WALLS.forEach(wall => {\r\n      const col = wall[0];\r\n      const row = wall[1];\r\n      nodes[row][col] = { ...nodes[row][col], isWall: true };\r\n    });\r\n    return nodes;\r\n  };\r\n\r\n  const updateNodes = nodes => {\r\n    const newNodes = [];\r\n    // *** CREATE NODES ***\r\n    for (let row = 0; row < ROWS; row++) {\r\n      const rowNodes = [];\r\n      for (let col = 0; col < COLS; col++) {\r\n        // *** \"Restart\" some nodes ***\r\n        const currentNode = nodes[row][col];\r\n        if (currentNode.isStart) currentNode.isStart = false;\r\n        if (row === nodeStartRow && col === nodeStartCol)\r\n          currentNode.isStart = true;\r\n        rowNodes.push(currentNode);\r\n      }\r\n      newNodes.push(rowNodes);\r\n    }\r\n    return newNodes;\r\n  };\r\n\r\n  // Put a goal in col and row if the node isn't a wall o start\r\n  const handleNodeClick = (col, row) => {\r\n    const { isWall, isStart, isFinish} = nodes[row][col];\r\n    if (isWall || isStart || isFinish || isRunning) return;\r\n    isRunning = true;\r\n    // Add finish node\r\n    const newNodes = createNodes();\r\n    newNodes[row][col] = { ...newNodes[row][col], isFinish: true };\r\n    // Remove previous finish node if exists and it's diferent to current finish node\r\n    if (\r\n      nodeFinishRow !== null &&\r\n      nodeFinishCol !== null &&\r\n      (nodeFinishRow !== row || nodeFinishCol !== col)\r\n    )\r\n      newNodes[nodeFinishRow][nodeFinishCol] = {\r\n        ...newNodes[nodeFinishRow][nodeFinishCol],\r\n        isFinish: false\r\n      };\r\n    resetTextNodeClass();\r\n    setNodeFinishCol(col);\r\n    setNodeFinishRow(row);\r\n    setNodes(newNodes);\r\n    visualize(newNodes, col, row);\r\n  };\r\n\r\n  const resetTextNodeClass = () => {\r\n    const textNodes = document.querySelectorAll(\".node__text\");\r\n    for (const textNode of textNodes) {\r\n      textNode.className = \"node__text--hide\";\r\n    }\r\n  };\r\n\r\n  const animatePlayerRoute = nodeRoute => {\r\n    for (let i = 0; i < nodeRoute.length; i++) {\r\n      // eslint-disable-next-line no-loop-func\r\n      setTimeout(() => {\r\n        const node = nodeRoute[i];\r\n        setNodeStartCol(node.col);\r\n        setNodeStartRow(node.row);\r\n        // Remove node-start class to previous start node\r\n        document.getElementById(\r\n          `node-maze-${node.row}-${node.col}`\r\n        ).className = !node.isFinish\r\n          ? \"node__maze node__maze--start\"\r\n          : \"node__maze node__maze--finish node__maze--start\";\r\n        if (node.isFinish) isRunning = false;\r\n      }, 100 * i);\r\n    }\r\n  };\r\n\r\n  const animateShortestRoute = nodeRoute => {\r\n    for (let i = 0; i <= nodeRoute.length; i++) {\r\n      if (i === nodeRoute.length) {\r\n        setTimeout(() => {\r\n          animatePlayerRoute(nodeRoute);\r\n        }, 100 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = nodeRoute[i];\r\n        document.getElementById(\r\n          `node-maze-${node.row}-${node.col}`\r\n        ).className = node.isStart\r\n          ? \"node__maze node__maze--start\"\r\n          : node.isFinish\r\n          ? \"node__maze node__maze--finish\"\r\n          : \"node__maze node__maze--shortest\";\r\n      }, 80 * i);\r\n    }\r\n  };\r\n\r\n  const animateMaze = (nodesVisited, nodesRoute) => {\r\n    for (let i = 0; i <= nodesVisited.length; i++) {\r\n      if (i === nodesVisited.length) {\r\n        setTimeout(() => {\r\n          animateShortestRoute(nodesRoute);\r\n        }, 80 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = nodesVisited[i];\r\n        const currentNode = document.getElementById(\r\n          `node-maze-${node.row}-${node.col}`\r\n        );\r\n        const currentNodeChildren = currentNode.lastChild;\r\n        currentNodeChildren.className = \"node__text\";\r\n      }, 70 * i);\r\n    }\r\n  };\r\n\r\n  const visualize = (nodes, finishCol, finishRow) => {\r\n    const visitedNodes = searchRoutes(nodes, finishCol, finishRow);\r\n    const route = searchShortRoute(nodes, nodeStartCol, nodeStartRow);\r\n    setTimeout(() => {\r\n      animateMaze(visitedNodes, route);\r\n    }, 300);\r\n  };\r\n\r\n  const searchRoutes = (nodes, finishCol, finishRow) => {\r\n    const visitedNodes = [];\r\n    let distance = 0;\r\n    nodes[finishRow][finishCol] = {\r\n      ...nodes[finishRow][finishCol],\r\n      isVisited: true,\r\n      distance\r\n    };\r\n    visitedNodes.push(nodes[finishRow][finishCol]);\r\n    let startNodeFound = false;\r\n    while (!startNodeFound) {\r\n      const nodesByDistance = getNodesByDistance(distance, nodes);\r\n      for (const nodeByDistance of nodesByDistance) {\r\n        const condition = node => !node.isWall && !node.isVisited;\r\n        const unvisitedNeighbors = getNeighbors(\r\n          nodeByDistance,\r\n          nodes,\r\n          condition\r\n        );\r\n        for (const neighbor of unvisitedNeighbors) {\r\n          const { col, row } = neighbor;\r\n          nodes[row][col] = {\r\n            ...nodes[row][col],\r\n            isVisited: true,\r\n            distance: distance + 1\r\n          };\r\n          visitedNodes.push(nodes[row][col]);\r\n          if (nodes[row][col].isStart) startNodeFound = true;\r\n        }\r\n      }\r\n      distance++;\r\n    }\r\n    return visitedNodes;\r\n  };\r\n\r\n  const searchShortRoute = (nodes, startCol, startRow) => {\r\n    const startNode = nodes[startRow][startCol];\r\n    const route = [startNode];\r\n    let finishNodeFound = false;\r\n    let currentNode = startNode;\r\n    const condition = node => !node.isWall;\r\n    while (!finishNodeFound) {\r\n      const nodesNeighbors = getNeighbors(currentNode, nodes, condition);\r\n      const nextNodeToVisit = getNearNode(nodesNeighbors);\r\n      route.push(nextNodeToVisit);\r\n      currentNode = nextNodeToVisit;\r\n      if (nextNodeToVisit.isFinish) finishNodeFound = true;\r\n    }\r\n    return route;\r\n  };\r\n\r\n  const getNearNode = nodes => {\r\n    const orderNodes = nodes.slice().sort((a, b) => a.distance - b.distance);\r\n    return orderNodes[0];\r\n  };\r\n\r\n  // *** NODES STATE ***\r\n  const [nodes, setNodes] = useState(createNodes());\r\n\r\n  useEffect(() => {\r\n    setNodes(updateNodes(nodes));\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [nodeStartCol, nodeStartRow]);\r\n\r\n  return (\r\n    <main className=\"maze\" id=\"maze\">\r\n      <p className=\"maze__message\">\r\n        Click to add a goal\r\n        <span\r\n          style={{ marginLeft: 10 }}\r\n          className=\"node__maze node__maze--finish\"\r\n        ></span>\r\n      </p>\r\n      <section className=\"maze__grid\">\r\n        {nodes.map((row, rowIdx) => {\r\n          return (\r\n            <div className=\"node__row\" key={`row-${rowIdx}`}>\r\n              {row.map((node, nodeIdx) => {\r\n                return (\r\n                  <Node\r\n                    key={`node-${rowIdx}-${nodeIdx}`}\r\n                    node={node}\r\n                    onClick={(col, row) => {\r\n                      handleNodeClick(col, row);\r\n                    }}\r\n                  />\r\n                );\r\n              })}\r\n            </div>\r\n          );\r\n        })}\r\n      </section>\r\n    </main>\r\n  );\r\n};\r\n\r\nfunction getNodesByDistance(distance, nodes) {\r\n  const nodesByDistance = [];\r\n  nodes.forEach(row => {\r\n    nodesByDistance.push(...row.filter(node => node.distance === distance));\r\n  });\r\n  return nodesByDistance;\r\n}\r\n\r\nconst getNeighbors = (node, nodes, condition) => {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n  if (row - 1 >= 0) neighbors.push(nodes[row - 1][col]);\r\n  if (col + 1 < nodes[row].length) neighbors.push(nodes[row][col + 1]);\r\n  if (row + 1 < nodes.length) neighbors.push(nodes[row + 1][col]);\r\n  if (col - 1 >= 0) neighbors.push(nodes[row][col - 1]);\r\n  return neighbors.filter(node => condition(node));\r\n};\r\n\r\nexport default Maze;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ArrayElement from \"./ArrayElement/ArrayElement.jsx\";\r\nimport { createArray, binarySearch } from \"../../algorithms/binarySearch\";\r\nimport { getGridTemplateColumns } from \"../../helpers\";\r\nimport \"./BinarySearch.css\";\r\n\r\nconst INITIAL_ARRAY_SIZE =\r\n  Math.floor((document.body.clientWidth - 35) / 35) - 2;\r\nconst isNumber = /^\\d+$/;\r\n\r\nexport default () => {\r\n  const handleTargetChange = nextTarget => {\r\n    const onlyNumbers = isNumber.test(nextTarget);\r\n    const isOnRange = onRange(arraySize, nextTarget);\r\n    const error = !onlyNumbers\r\n      ? \"The entry must only contain numbers\"\r\n      : !isOnRange\r\n      ? \"The entry isn't on range\"\r\n      : \"\";\r\n    setError(error);\r\n    setTarget(nextTarget);\r\n  };\r\n\r\n  const handleClick = nextTarget => {\r\n    let next = nextTarget;\r\n    if (nextTarget > arraySize) next = arraySize;\r\n    else if (nextTarget < 1) next = 1;\r\n    setTarget(next);\r\n    setError(\"\");\r\n  };\r\n\r\n  const visualizeBinarySearch = () => {\r\n    const test = binarySearch(array, target);\r\n    setTimeout(() => {\r\n        for(let i = 0; i < test.length; i++){\r\n            setTimeout(() => {\r\n                document.getElementById(`binary-${i+1}`).style.color = \"yellow\";\r\n            }, 220 * i);\r\n        }\r\n    }, 300);\r\n  };\r\n\r\n  const [arraySize, setArraySize] = useState(INITIAL_ARRAY_SIZE);\r\n  const [array, setArray] = useState(createArray(arraySize));\r\n  const [target, setTarget] = useState(\r\n    Math.floor(Math.random() * arraySize) + 1\r\n  );\r\n  const [error, setError] = useState(\"\");\r\n\r\n  window.addEventListener(\"resize\", () => {\r\n    setArraySize(Math.floor((document.body.clientWidth - 35) / 35) - 2);\r\n  });\r\n\r\n  useEffect(() => {\r\n    setArray(createArray(arraySize));\r\n    setTarget(Math.floor(Math.random() * arraySize) + 1);\r\n  }, [arraySize]);\r\n\r\n  return (\r\n    <section className=\"binary__section\">\r\n      <div className=\"binary__input\">\r\n        <p>Enter a number to search (1 - {arraySize})</p>\r\n        <div className=\"quantity\">\r\n          <input\r\n            type=\"text\"\r\n            value={target}\r\n            onChange={({ target: { value } }) => {\r\n              handleTargetChange(value);\r\n            }}\r\n          ></input>\r\n          <div className=\"quantity__btns\">\r\n            <button\r\n              disabled={!isNumber.test(target)}\r\n              onClick={() => handleClick(Number(target) + 1)}\r\n              className=\"quantity__btn\"\r\n            >\r\n              +\r\n            </button>\r\n            <button\r\n              disabled={!isNumber.test(target)}\r\n              onClick={() => handleClick(Number(target) - 1)}\r\n              className=\"quantity__btn\"\r\n            >\r\n              -\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <p className=\"binary__error\">{error}</p>\r\n      </div>\r\n      <button\r\n        className=\"binary__btn\"\r\n        disabled={error !== \"\"}\r\n        onClick={() => visualizeBinarySearch()}\r\n      >\r\n        Visualize binary search\r\n      </button>\r\n      <div\r\n        style={{\r\n          gridTemplateColumns: getGridTemplateColumns(arraySize, \"35px\")\r\n        }}\r\n        className=\"binary__search\"\r\n      >\r\n        {array.map(number => {\r\n          return (\r\n            <ArrayElement\r\n              key={`array-${number}`}\r\n              number={number}\r\n            ></ArrayElement>\r\n          );\r\n        })}\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nconst onRange = (maxRange, nextTarget) => {\r\n  return nextTarget > 0 && nextTarget <= maxRange;\r\n};\r\n","function currentYPosition() {\r\n  // Firefox, Chrome, Opera, Safari\r\n  // eslint-disable-next-line no-restricted-globals\r\n  if (self.pageYOffset) return self.pageYOffset;\r\n  // Internet Explorer 6 - standards mode\r\n  if (document.documentElement && document.documentElement.scrollTop)\r\n    return document.documentElement.scrollTop;\r\n  // Internet Explorer 6, 7 and 8\r\n  if (document.body.scrollTop) return document.body.scrollTop;\r\n  return 0;\r\n}\r\n\r\nfunction elmYPosition(eID) {\r\n  var elm = document.getElementById(eID);\r\n  var y = elm.offsetTop;\r\n  var node = elm;\r\n  while (node.offsetParent && node.offsetParent !== document.body) {\r\n    node = node.offsetParent;\r\n    y += node.offsetTop;\r\n  }\r\n  return y;\r\n}\r\n\r\nexport default function smoothScroll(eID) {\r\n  var startY = currentYPosition();\r\n  var stopY = elmYPosition(eID);\r\n  var distance = stopY > startY ? stopY - startY : startY - stopY;\r\n  if (distance < 100) {\r\n    // eslint-disable-next-line no-restricted-globals\r\n    scrollTo(0, stopY);\r\n    return;\r\n  }\r\n  var speed = Math.round(distance / 100);\r\n  if (speed >= 20) speed = 20;\r\n  var step = Math.round(distance / 25);\r\n  var leapY = stopY > startY ? startY + step : startY - step;\r\n  var timer = 0;\r\n  if (stopY > startY) {\r\n    for (let i = startY; i < stopY; i += step) {\r\n      // eslint-disable-next-line no-implied-eval\r\n      setTimeout(\"window.scrollTo(0, \" + leapY + \")\", timer * speed);\r\n      leapY += step;\r\n      if (leapY > stopY) leapY = stopY;\r\n      timer++;\r\n    }\r\n    return;\r\n  }\r\n  for (let i = startY; i > stopY; i -= step) {\r\n    // eslint-disable-next-line no-implied-eval\r\n    setTimeout(\"window.scrollTo(0, \" + leapY + \")\", timer * speed);\r\n    leapY -= step;\r\n    if (leapY < stopY) leapY = stopY;\r\n    timer++;\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Pathfinding from \"./components/Pathfinding/Pathfinding.jsx\";\r\nimport Maze from \"./components/Maze/Maze.jsx\";\r\nimport BinarySearch from \"./components/BinarySearch/BinarySearch.jsx\";\r\nimport scroll from './scroll';\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <section className=\"menu\">\r\n        <button className=\"menu__btn\" onClick={() => scroll(\"pathfinding\")}>Pathfinding</button>\r\n        <button className=\"menu__btn\" onClick={() => scroll(\"maze\")}>Maze</button>\r\n      </section>\r\n      <div style={{height: '60px', width: '100vw'}}></div>\r\n      <Pathfinding></Pathfinding>\r\n      <Maze></Maze>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}